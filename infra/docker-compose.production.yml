services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: orca-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: orca_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: orcadata_prod
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports: 
      - "127.0.0.1:5432:5432"  # Bind only to localhost
    volumes:
      - db_data_prod:/var/lib/postgresql/data/pgdata
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - db_logs:/var/log/postgresql
    command: |
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orca_user -d orcadata_prod -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql
    user: postgres
    networks:
      - orca_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: orca-redis-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Bind only to localhost
    volumes:
      - redis_data_prod:/data
      - redis_logs:/var/log/redis
    command: |
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --logfile /var/log/redis/redis.log
      --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: redis
    networks:
      - orca_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Backend Application
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: orca-backend-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3001"  # Bind only to localhost
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgres://orca_user:${POSTGRES_PASSWORD}@db:5432/orcadata_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      HELIUS_API_KEY: ${HELIUS_API_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    volumes:
      - backend_logs:/app/logs
      - ./ssl:/app/ssl:ro  # SSL certificates if needed
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    user: node
    networks:
      - orca_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: orca-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ../frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    networks:
      - orca_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

volumes:
  db_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/orca/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/orca/redis
  db_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/orca/postgres
  redis_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/orca/redis
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/orca/backend
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/orca/nginx

networks:
  orca_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: orca-bridge