import express from 'express';
import { getPoolDetailsData } from '../lib/orca.js';
import { logger } from '../lib/logger.js';

const router = express.Router();

/**
 * Rota para buscar dados completos de uma pool espec√≠fica
 * GET /poolsdetails/:poolid
 * 
 * Query Parameters:
 * - topPositions: n√∫mero (ex: 10) para limitar a N posi√ß√µes com maior liquidez. Se > 0, inclui posi√ß√µes
 * 
 * Dados retornados para visualiza√ß√µes:
 * - allTicks: Array de todos os ticks com dados detalhados (tickIndex, price, priceAdjusted, liquidityGross, etc.)
 * - tickStats: Estat√≠sticas dos ticks incluindo an√°lise de range e concentra√ß√£o de liquidez
 * - tickStats.rangeAnalysis.ticksAroundCurrent: Ticks pr√≥ximos ao pre√ßo atual para an√°lise de range
 * - tickStats.rangeAnalysis.liquidityConcentration: Distribui√ß√£o de liquidez por tick
 * - tickStats.currentPrice: Pre√ßo atual ajustado para os tokens da pool
 * - tickStats.liquidityDistribution: Estat√≠sticas de distribui√ß√£o de liquidez (total, m√©dia, min, max)
 * 
 * Dados das posi√ß√µes (quando topPositions > 0):
 * - positions: Array de posi√ß√µes com dados b√°sicos (liquidez, fees, range, status)
 * - positionStats: Estat√≠sticas agregadas das posi√ß√µes (ativas, fora do range, fees totais)
 * - Cada posi√ß√£o inclui: pubkey, tickLower/Upper, liquidez, fees, isInRange, pre√ßos, status
 */
router.get('/:poolid', async (req, res) => {
  try {
    const { poolid } = req.params;
    const { topPositions } = req.query;

    logger.info(`üîç Buscando dados completos da pool: ${poolid}`);

    // Usar fun√ß√£o centralizada do orca.ts para toda a l√≥gica de neg√≥cio
    const response = await getPoolDetailsData(poolid, topPositions as string);

    logger.info(`‚úÖ Dados da pool obtidos com sucesso: ${poolid}`);
    res.json(response);

  } catch (error: any) {
    logger.error('‚ùå Erro ao buscar dados da pool:', error);

    let errorResponse: any = {
      error: 'Failed to fetch pool details',
      message: error.message || 'Unknown error',
      timestamp: new Date().toISOString(),
      poolId: req.params.poolid
    };

    if (error.message?.includes('Invalid pool address')) {
      errorResponse.statusCode = 400;
      errorResponse.suggestions = [
        'Verifique se o endere√ßo da pool est√° correto',
        'O endere√ßo deve ser uma chave p√∫blica Solana v√°lida'
      ];
    } else if (error.message?.includes('Invalid topPositions parameter')) {
      errorResponse.statusCode = 400;
      errorResponse.suggestions = [
        'topPositions deve ser um n√∫mero entre 0 e 1000',
        'Use 0 para omitir posi√ß√µes ou um n√∫mero > 0 para incluir posi√ß√µes'
      ];
    } else if (error.message?.includes('Pool not found')) {
      errorResponse.statusCode = 404;
      errorResponse.suggestions = [
        'Verifique se o endere√ßo da pool est√° correto',
        'Confirme se a pool existe na rede Mainnet',
        'A pool pode ter sido removida ou n√£o estar ativa'
      ];
    } else if (error.message?.includes('SDK failed')) {
      errorResponse.statusCode = 503;
      errorResponse.suggestions = [
        'O SDK do Orca pode estar temporariamente indispon√≠vel',
        'Tente novamente em alguns minutos',
        'Verifique se a conex√£o com a rede Solana est√° est√°vel'
      ];
    } else {
      errorResponse.statusCode = 500;
      errorResponse.suggestions = [
        'Verifique se o endere√ßo da pool est√° correto',
        'Confirme se a rede Mainnet est√° acess√≠vel',
        'Verifique se as depend√™ncias est√£o atualizadas',
        'Configure uma chave de API da Helius para melhor performance'
      ];
    }

    res.status(errorResponse.statusCode || 500).json(errorResponse);
  }
});

export default router;
